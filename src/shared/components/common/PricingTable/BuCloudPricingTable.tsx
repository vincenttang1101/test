/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable jsx-a11y/anchor-is-valid */
'use client'

import Link from 'next/link'
import { useEffect, useMemo, useState } from 'react'

import { Product as VpsProduct } from '@/shared/types/products.type'
import { cn, formatPrice, parseSpecs } from '@/shared/utils/cores'

import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../cores/ui/select'

type Product = {
  plan: string
  ram: string
  processor: string
  storage: string
  bandwidth: string
  monthPrice: number
  yearPrice: number
}

/**
 *  Extract the number part from by string
 * @param ram '1 GB'
 * @param by 'GB'
 * @returns 1
 */
const parseByString = (ram: string, by: string) => parseInt(ram.replace(by, ''), 10)

const productHeaderList: {
  column: string
  isSortable: boolean
  // eslint-disable-next-line no-undef
  icon: JSX.Element
  sortFunction?: (a: Product, b: Product) => number
}[] = [
  {
    column: 'Plan',
    isSortable: false,
    icon: (
      <svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18' fill='none'>
        <path
          d='M5.0625 1.5C3.93008 1.5 3 2.43008 3 3.5625V14.4375C3 15.5699 3.93008 16.5 5.0625 16.5H12.9375C14.0699 16.5 15 15.5699 15 14.4375V3.5625C15 2.43008 14.0699 1.5 12.9375 1.5H5.0625ZM5.0625 2.625H12.9375C13.4618 2.625 13.875 3.03817 13.875 3.5625V14.4375C13.875 14.9618 13.4618 15.375 12.9375 15.375H5.0625C4.53817 15.375 4.125 14.9618 4.125 14.4375V3.5625C4.125 3.03817 4.53817 2.625 5.0625 2.625ZM5.8125 3.75C5.66332 3.75001 5.52025 3.80928 5.41477 3.91477C5.30928 4.02025 5.25002 4.16332 5.25 4.3125V9.5625C5.25002 9.71168 5.30928 9.85474 5.41477 9.96023C5.52025 10.0657 5.66332 10.125 5.8125 10.125H12.1875C12.3367 10.125 12.4797 10.0657 12.5852 9.96023C12.6907 9.85474 12.75 9.71168 12.75 9.5625V4.3125C12.75 4.16332 12.6907 4.02025 12.5852 3.91477C12.4797 3.80928 12.3367 3.75001 12.1875 3.75H5.8125ZM6.375 4.875H11.625V6.375H6.375V4.875ZM6.375 7.5H11.625V9H6.375V7.5ZM9 11.625C8.70163 11.625 8.41548 11.7435 8.2045 11.9545C7.99353 12.1655 7.875 12.4516 7.875 12.75C7.875 13.0484 7.99353 13.3345 8.2045 13.5455C8.41548 13.7565 8.70163 13.875 9 13.875C9.29837 13.875 9.58452 13.7565 9.7955 13.5455C10.0065 13.3345 10.125 13.0484 10.125 12.75C10.125 12.4516 10.0065 12.1655 9.7955 11.9545C9.58452 11.7435 9.29837 11.625 9 11.625Z'
          fill='#5961CC'
        ></path>
      </svg>
    )
  },

  {
    column: 'Ram',
    isSortable: true,
    sortFunction: (a, b) => {
      return parseByString(a.ram, 'GB') - parseByString(b.ram, 'GB')
    },
    icon: (
      <svg xmlns='http://www.w3.org/2000/svg' width='25' height='24' viewBox='0 0 25 24' fill='none'>
        <path
          d='M4.25 4.5C3.01625 4.5 2 5.51625 2 6.75V14.127C1.98678 14.2075 1.98678 14.2896 2 14.3701V17.25C2 18.4838 3.01625 19.5 4.25 19.5H10.5C10.6989 19.5 10.8897 19.421 11.0303 19.2803C11.171 19.1397 11.25 18.9489 11.25 18.75C11.25 18.0509 11.8009 17.5 12.5 17.5C13.1991 17.5 13.75 18.0509 13.75 18.75C13.75 18.9489 13.829 19.1397 13.9697 19.2803C14.1103 19.421 14.3011 19.5 14.5 19.5H20.75C21.9838 19.5 23 18.4838 23 17.25V14.373C23.0132 14.2925 23.0132 14.2104 23 14.1299V6.75C23 5.51625 21.9838 4.5 20.75 4.5H4.25ZM4.25 6H20.75C21.1733 6 21.5 6.32675 21.5 6.75V13.5H3.5V6.75C3.5 6.32675 3.82675 6 4.25 6ZM5 7C4.724 7 4.5 7.224 4.5 7.5V12C4.5 12.276 4.724 12.5 5 12.5H6.5C6.776 12.5 7 12.276 7 12V7.5C7 7.224 6.776 7 6.5 7H5ZM9.5 7C9.224 7 9 7.224 9 7.5V12C9 12.276 9.224 12.5 9.5 12.5H11C11.276 12.5 11.5 12.276 11.5 12V7.5C11.5 7.224 11.276 7 11 7H9.5ZM14 7C13.724 7 13.5 7.224 13.5 7.5V12C13.5 12.276 13.724 12.5 14 12.5H15.5C15.776 12.5 16 12.276 16 12V7.5C16 7.224 15.776 7 15.5 7H14ZM18.5 7C18.224 7 18 7.224 18 7.5V12C18 12.276 18.224 12.5 18.5 12.5H20C20.276 12.5 20.5 12.276 20.5 12V7.5C20.5 7.224 20.276 7 20 7H18.5ZM3.5 15H21.5V17.25C21.5 17.6732 21.1733 18 20.75 18H20.5V17.25C20.5014 17.1496 20.4827 17.05 20.4449 16.957C20.4072 16.8639 20.3511 16.7795 20.28 16.7085C20.209 16.6376 20.1245 16.5816 20.0314 16.544C19.9383 16.5063 19.8387 16.4877 19.7383 16.4893C19.5395 16.4924 19.3502 16.5742 19.2117 16.7169C19.0733 16.8595 18.9972 17.0513 19 17.25V18H18V17.25C18.0014 17.1496 17.9827 17.05 17.9449 16.957C17.9071 16.8639 17.8511 16.7795 17.78 16.7085C17.709 16.6376 17.6245 16.5816 17.5314 16.544C17.4383 16.5063 17.3387 16.4877 17.2383 16.4893C17.0395 16.4924 16.8502 16.5742 16.7117 16.7169C16.5733 16.8595 16.4972 17.0513 16.5 17.25V18H15.0967C14.762 16.8585 13.7444 16 12.5 16C11.2556 16 10.238 16.8585 9.90332 18H8.5V17.25C8.50144 17.1496 8.48272 17.05 8.44493 16.957C8.40715 16.8639 8.35108 16.7795 8.28005 16.7085C8.20901 16.6376 8.12446 16.5816 8.0314 16.544C7.93834 16.5063 7.83866 16.4877 7.73828 16.4893C7.53954 16.4924 7.35016 16.5742 7.21173 16.7169C7.0733 16.8595 6.99715 17.0513 7 17.25V18H6V17.25C6.00144 17.1496 5.98272 17.05 5.94493 16.957C5.90715 16.8639 5.85108 16.7795 5.78005 16.7085C5.70901 16.6376 5.62446 16.5816 5.5314 16.544C5.43834 16.5063 5.33866 16.4877 5.23828 16.4893C5.03954 16.4924 4.85016 16.5742 4.71173 16.7169C4.5733 16.8595 4.49715 17.0513 4.5 17.25V18H4.25C3.82675 18 3.5 17.6732 3.5 17.25V15Z'
          fill='#5961CC'
        ></path>
      </svg>
    )
  },
  {
    column: 'Processor',
    isSortable: true,
    sortFunction: (a, b) => parseByString(a.processor, 'Core') - parseByString(b.processor, 'Core'),
    icon: (
      <svg xmlns='http://www.w3.org/2000/svg' width='25' height='24' viewBox='0 0 25 24' fill='none'>
        <path
          d='M7.2392 2.48935C7.04045 2.49245 6.85107 2.57432 6.71264 2.71696C6.57422 2.85959 6.49807 3.05135 6.50092 3.25009V4.65341C5.87212 4.88145 5.38228 5.37129 5.15424 6.00009H3.75092C3.65153 5.99869 3.55286 6.01705 3.46063 6.05411C3.36841 6.09117 3.28447 6.14619 3.21369 6.21597C3.14291 6.28575 3.08671 6.36891 3.04835 6.4606C3.00999 6.5523 2.99023 6.6507 2.99023 6.75009C2.99023 6.84949 3.00999 6.94789 3.04835 7.03958C3.08671 7.13127 3.14291 7.21443 3.21369 7.28421C3.28447 7.35399 3.36841 7.40902 3.46063 7.44608C3.55286 7.48314 3.65153 7.5015 3.75092 7.50009H5.00092V9.50009H3.75092C3.65153 9.49869 3.55286 9.51705 3.46063 9.55411C3.36841 9.59117 3.28447 9.64619 3.21369 9.71597C3.14291 9.78576 3.08671 9.86891 3.04835 9.9606C3.00999 10.0523 2.99023 10.1507 2.99023 10.2501C2.99023 10.3495 3.00999 10.4479 3.04835 10.5396C3.08671 10.6313 3.14291 10.7144 3.21369 10.7842C3.28447 10.854 3.36841 10.909 3.46063 10.9461C3.55286 10.9831 3.65153 11.0015 3.75092 11.0001H5.00092V13.0001H3.75092C3.65153 12.9987 3.55286 13.017 3.46063 13.0541C3.36841 13.0912 3.28447 13.1462 3.21369 13.216C3.14291 13.2858 3.08671 13.3689 3.04835 13.4606C3.00999 13.5523 2.99023 13.6507 2.99023 13.7501C2.99023 13.8495 3.00999 13.9479 3.04835 14.0396C3.08671 14.1313 3.14291 14.2144 3.21369 14.2842C3.28447 14.354 3.36841 14.409 3.46063 14.4461C3.55286 14.4831 3.65153 14.5015 3.75092 14.5001H5.00092V16.5001H3.75092C3.65153 16.4987 3.55286 16.517 3.46063 16.5541C3.36841 16.5912 3.28447 16.6462 3.21369 16.716C3.14291 16.7858 3.08671 16.8689 3.04835 16.9606C3.00999 17.0523 2.99023 17.1507 2.99023 17.2501C2.99023 17.3495 3.00999 17.4479 3.04835 17.5396C3.08671 17.6313 3.14291 17.7144 3.21369 17.7842C3.28447 17.854 3.36841 17.909 3.46063 17.9461C3.55286 17.9831 3.65153 18.0015 3.75092 18.0001H5.15424C5.38228 18.6289 5.87212 19.1187 6.50092 19.3468V20.7501C6.49951 20.8495 6.51787 20.9481 6.55493 21.0404C6.59199 21.1326 6.64701 21.2165 6.7168 21.2873C6.78658 21.3581 6.86973 21.4143 6.96143 21.4527C7.05312 21.491 7.15152 21.5108 7.25092 21.5108C7.35031 21.5108 7.44871 21.491 7.54041 21.4527C7.6321 21.4143 7.71525 21.3581 7.78504 21.2873C7.85482 21.2165 7.90984 21.1326 7.9469 21.0404C7.98396 20.9481 8.00232 20.8495 8.00092 20.7501V19.5001H10.0009V20.7501C9.99951 20.8495 10.0179 20.9481 10.0549 21.0404C10.092 21.1326 10.147 21.2165 10.2168 21.2873C10.2866 21.3581 10.3697 21.4143 10.4614 21.4527C10.5531 21.491 10.6515 21.5108 10.7509 21.5108C10.8503 21.5108 10.9487 21.491 11.0404 21.4527C11.1321 21.4143 11.2153 21.3581 11.285 21.2873C11.3548 21.2165 11.4098 21.1326 11.4469 21.0404C11.484 20.9481 11.5023 20.8495 11.5009 20.7501V19.5001H13.5009V20.7501C13.4995 20.8495 13.5179 20.9481 13.5549 21.0404C13.592 21.1326 13.647 21.2165 13.7168 21.2873C13.7866 21.3581 13.8697 21.4143 13.9614 21.4527C14.0531 21.491 14.1515 21.5108 14.2509 21.5108C14.3503 21.5108 14.4487 21.491 14.5404 21.4527C14.6321 21.4143 14.7153 21.3581 14.785 21.2873C14.8548 21.2165 14.9098 21.1326 14.9469 21.0404C14.984 20.9481 15.0023 20.8495 15.0009 20.7501V19.5001H17.0009V20.7501C16.9995 20.8495 17.0179 20.9481 17.0549 21.0404C17.092 21.1326 17.147 21.2165 17.2168 21.2873C17.2866 21.3581 17.3697 21.4143 17.4614 21.4527C17.5531 21.491 17.6515 21.5108 17.7509 21.5108C17.8503 21.5108 17.9487 21.491 18.0404 21.4527C18.1321 21.4143 18.2153 21.3581 18.285 21.2873C18.3548 21.2165 18.4098 21.1326 18.4469 21.0404C18.484 20.9481 18.5023 20.8495 18.5009 20.7501V19.3468C19.1297 19.1187 19.6196 18.6289 19.8476 18.0001H21.2509C21.3503 18.0015 21.449 17.9831 21.5412 17.9461C21.6334 17.909 21.7174 17.854 21.7881 17.7842C21.8589 17.7144 21.9151 17.6313 21.9535 17.5396C21.9918 17.4479 22.0116 17.3495 22.0116 17.2501C22.0116 17.1507 21.9918 17.0523 21.9535 16.9606C21.9151 16.8689 21.8589 16.7858 21.7881 16.716C21.7174 16.6462 21.6334 16.5912 21.5412 16.5541C21.449 16.517 21.3503 16.4987 21.2509 16.5001H20.0009V14.5001H21.2509C21.3503 14.5015 21.449 14.4831 21.5412 14.4461C21.6334 14.409 21.7174 14.354 21.7881 14.2842C21.8589 14.2144 21.9151 14.1313 21.9535 14.0396C21.9918 13.9479 22.0116 13.8495 22.0116 13.7501C22.0116 13.6507 21.9918 13.5523 21.9535 13.4606C21.9151 13.3689 21.8589 13.2858 21.7881 13.216C21.7174 13.1462 21.6334 13.0912 21.5412 13.0541C21.449 13.017 21.3503 12.9987 21.2509 13.0001H20.0009V11.0001H21.2509C21.3503 11.0015 21.449 10.9831 21.5412 10.9461C21.6334 10.909 21.7174 10.854 21.7881 10.7842C21.8589 10.7144 21.9151 10.6313 21.9535 10.5396C21.9918 10.4479 22.0116 10.3495 22.0116 10.2501C22.0116 10.1507 21.9918 10.0523 21.9535 9.9606C21.9151 9.86891 21.8589 9.78576 21.7881 9.71597C21.7174 9.64619 21.6334 9.59117 21.5412 9.55411C21.449 9.51705 21.3503 9.49869 21.2509 9.50009H20.0009V7.50009H21.2509C21.3503 7.5015 21.449 7.48314 21.5412 7.44608C21.6334 7.40902 21.7174 7.35399 21.7881 7.28421C21.8589 7.21443 21.9151 7.13127 21.9535 7.03958C21.9918 6.94789 22.0116 6.84949 22.0116 6.75009C22.0116 6.6507 21.9918 6.5523 21.9535 6.4606C21.9151 6.36891 21.8589 6.28575 21.7881 6.21597C21.7174 6.14619 21.6334 6.09117 21.5412 6.05411C21.449 6.01705 21.3503 5.99869 21.2509 6.00009H19.8476C19.6196 5.37129 19.1297 4.88145 18.5009 4.65341V3.25009C18.5023 3.15071 18.484 3.05204 18.4469 2.95981C18.4098 2.86758 18.3548 2.78364 18.285 2.71287C18.2153 2.64209 18.1321 2.58589 18.0404 2.54752C17.9487 2.50916 17.8503 2.48941 17.7509 2.48941C17.6515 2.48941 17.5531 2.50916 17.4614 2.54752C17.3697 2.58589 17.2866 2.64209 17.2168 2.71287C17.147 2.78364 17.092 2.86758 17.0549 2.95981C17.0179 3.05204 16.9995 3.15071 17.0009 3.25009V4.50009H15.0009V3.25009C15.0023 3.15071 14.984 3.05204 14.9469 2.95981C14.9098 2.86758 14.8548 2.78364 14.785 2.71287C14.7153 2.64209 14.6321 2.58589 14.5404 2.54752C14.4487 2.50916 14.3503 2.48941 14.2509 2.48941C14.1515 2.48941 14.0531 2.50916 13.9614 2.54752C13.8697 2.58589 13.7866 2.64209 13.7168 2.71287C13.647 2.78364 13.592 2.86758 13.5549 2.95981C13.5179 3.05204 13.4995 3.15071 13.5009 3.25009V4.50009H11.5009V3.25009C11.5023 3.15071 11.484 3.05204 11.4469 2.95981C11.4098 2.86758 11.3548 2.78364 11.285 2.71287C11.2153 2.64209 11.1321 2.58589 11.0404 2.54752C10.9487 2.50916 10.8503 2.48941 10.7509 2.48941C10.6515 2.48941 10.5531 2.50916 10.4614 2.54752C10.3697 2.58589 10.2866 2.64209 10.2168 2.71287C10.147 2.78364 10.092 2.86758 10.0549 2.95981C10.0179 3.05204 9.99951 3.15071 10.0009 3.25009V4.50009H8.00092V3.25009C8.00236 3.14971 7.98363 3.05006 7.94585 2.95705C7.90806 2.86403 7.852 2.77955 7.78096 2.70861C7.70993 2.63767 7.62537 2.5817 7.53231 2.54404C7.43925 2.50638 7.33958 2.48778 7.2392 2.48935ZM7.37103 6.00009H10.6279C10.7084 6.01332 10.7905 6.01332 10.871 6.00009H14.1279C14.2084 6.01332 14.2905 6.01332 14.371 6.00009H17.6279C17.6766 6.00819 17.726 6.01146 17.7753 6.00986C18.1753 6.02399 18.4775 6.32656 18.4912 6.72665C18.4898 6.77471 18.4931 6.82278 18.5009 6.87021V10.127C18.4877 10.2076 18.4877 10.2897 18.5009 10.3702V13.627C18.4877 13.7076 18.4877 13.7897 18.5009 13.8702V17.127C18.4928 17.1758 18.4895 17.2252 18.4912 17.2745C18.477 17.6744 18.1745 17.9767 17.7744 17.9903C17.7263 17.989 17.6782 17.9922 17.6308 18.0001H14.374C14.2934 17.9869 14.2113 17.9869 14.1308 18.0001H10.874C10.7934 17.9869 10.7113 17.9869 10.6308 18.0001H7.37396C7.32525 17.992 7.27586 17.9887 7.2265 17.9903C6.82656 17.9762 6.52433 17.6736 6.51068 17.2735C6.51203 17.2255 6.50876 17.1774 6.50092 17.13V13.8731C6.51414 13.7926 6.51414 13.7105 6.50092 13.63V10.3731C6.51414 10.2926 6.51414 10.2105 6.50092 10.13V6.87314C6.50902 6.82443 6.51229 6.77503 6.51068 6.72568C6.52481 6.32573 6.82738 6.0235 7.22748 6.00986C7.27553 6.01121 7.32361 6.00794 7.37103 6.00009ZM8.25092 7.00009C8.052 7.00009 7.86124 7.07911 7.72059 7.21976C7.57993 7.36041 7.50092 7.55118 7.50092 7.75009C7.50092 7.949 7.57993 8.13977 7.72059 8.28042C7.86124 8.42107 8.052 8.50009 8.25092 8.50009C8.44983 8.50009 8.64059 8.42107 8.78125 8.28042C8.9219 8.13977 9.00092 7.949 9.00092 7.75009C9.00092 7.55118 8.9219 7.36041 8.78125 7.21976C8.64059 7.07911 8.44983 7.00009 8.25092 7.00009ZM16.7509 15.5001C16.552 15.5001 16.3612 15.5791 16.2206 15.7198C16.0799 15.8604 16.0009 16.0512 16.0009 16.2501C16.0009 16.449 16.0799 16.6398 16.2206 16.7804C16.3612 16.9211 16.552 17.0001 16.7509 17.0001C16.9498 17.0001 17.1406 16.9211 17.2812 16.7804C17.4219 16.6398 17.5009 16.449 17.5009 16.2501C17.5009 16.0512 17.4219 15.8604 17.2812 15.7198C17.1406 15.5791 16.9498 15.5001 16.7509 15.5001Z'
          fill='#5961CC'
        ></path>
      </svg>
    )
  },
  {
    column: 'Storage',
    isSortable: true,
    sortFunction: (a, b) => parseByString(a.storage, 'GB') - parseByString(b.storage, 'GB'),
    icon: (
      <svg xmlns='http://www.w3.org/2000/svg' width='25' height='24' viewBox='0 0 25 24' fill='none'>
        <path
          d='M7.25 2C5.74011 2 4.5 3.24011 4.5 4.75V18.25V19.25C4.5 20.7599 5.74011 22 7.25 22H8.12695C8.20747 22.0132 8.2896 22.0132 8.37012 22H10.627C10.7075 22.0132 10.7896 22.0132 10.8701 22H13.127C13.2075 22.0132 13.2896 22.0132 13.3701 22H17.75C19.2599 22 20.5 20.7599 20.5 19.25V18.25V4.75C20.5 3.24011 19.2599 2 17.75 2H7.25ZM7.25 3.5H17.75C18.4491 3.5 19 4.05089 19 4.75V15.8066C18.6239 15.6123 18.1996 15.5 17.75 15.5H7.25C6.8004 15.5 6.37614 15.6123 6 15.8066V4.75C6 4.05089 6.55089 3.5 7.25 3.5ZM7.25 17H17.75C18.4491 17 19 17.5509 19 18.25V19.25C19 19.9491 18.4491 20.5 17.75 20.5H14V19.25C14.0014 19.1496 13.9827 19.05 13.9449 18.957C13.9071 18.8639 13.8511 18.7795 13.78 18.7085C13.709 18.6376 13.6245 18.5816 13.5314 18.544C13.4383 18.5063 13.3387 18.4877 13.2383 18.4893C13.0395 18.4924 12.8502 18.5742 12.7117 18.7169C12.5733 18.8595 12.4971 19.0513 12.5 19.25V20.5H11.5V19.25C11.5014 19.1496 11.4827 19.05 11.4449 18.957C11.4071 18.8639 11.3511 18.7795 11.28 18.7085C11.209 18.6376 11.1245 18.5816 11.0314 18.544C10.9383 18.5063 10.8387 18.4877 10.7383 18.4893C10.5395 18.4924 10.3502 18.5742 10.2117 18.7169C10.0733 18.8595 9.99715 19.0513 10 19.25V20.5H9V19.25C9.00144 19.1496 8.98271 19.05 8.94493 18.957C8.90715 18.8639 8.85108 18.7795 8.78004 18.7085C8.70901 18.6376 8.62446 18.5816 8.5314 18.544C8.43834 18.5063 8.33866 18.4877 8.23828 18.4893C8.03954 18.4924 7.85016 18.5742 7.71173 18.7169C7.5733 18.8595 7.49715 19.0513 7.5 19.25V20.5H7.25C6.55089 20.5 6 19.9491 6 19.25V18.25C6 17.5509 6.55089 17 7.25 17ZM17.25 18C17.0511 18 16.8603 18.079 16.7197 18.2197C16.579 18.3603 16.5 18.5511 16.5 18.75C16.5 18.9489 16.579 19.1397 16.7197 19.2803C16.8603 19.421 17.0511 19.5 17.25 19.5C17.4489 19.5 17.6397 19.421 17.7803 19.2803C17.921 19.1397 18 18.9489 18 18.75C18 18.5511 17.921 18.3603 17.7803 18.2197C17.6397 18.079 17.4489 18 17.25 18Z'
          fill='#5961CC'
        ></path>
      </svg>
    )
  },
  {
    column: 'Data Transfer',
    isSortable: false,
    icon: (
      <svg xmlns='http://www.w3.org/2000/svg' width='25' height='24' viewBox='0 0 25 24' fill='none'>
        <path
          d='M20 2.5C19.0625 2.5 18.2644 2.87857 17.752 3.45508C17.2395 4.03159 17 4.77083 17 5.5C17 6.22917 17.2395 6.96841 17.752 7.54492C17.7577 7.55137 17.7676 7.55415 17.7734 7.56055L15.4258 11.1885C15.1308 11.0985 14.8382 11 14.5 11C13.5625 11 12.7644 11.3786 12.252 11.9551C11.7395 12.5316 11.5 13.2708 11.5 14C11.5 14.1846 11.5615 14.3638 11.5928 14.5469L7.31738 16.5723C7.28824 16.5361 7.2792 16.4901 7.24805 16.4551C6.73559 15.8786 5.9375 15.5 5 15.5C4.0625 15.5 3.26441 15.8786 2.75195 16.4551C2.2395 17.0316 2 17.7708 2 18.5C2 19.2292 2.2395 19.9684 2.75195 20.5449C3.26441 21.1214 4.0625 21.5 5 21.5C5.9375 21.5 6.73559 21.1214 7.24805 20.5449C7.7605 19.9684 8 19.2292 8 18.5C8 18.3154 7.93847 18.1362 7.90723 17.9531L12.1826 15.9277C12.2118 15.9639 12.2208 16.0099 12.252 16.0449C12.7644 16.6214 13.5625 17 14.5 17C15.4375 17 16.2356 16.6214 16.748 16.0449C17.2605 15.4684 17.5 14.7292 17.5 14C17.5 13.2708 17.2605 12.5316 16.748 11.9551C16.7423 11.9486 16.7324 11.9458 16.7266 11.9395L19.0742 8.31152C19.3692 8.40152 19.6618 8.5 20 8.5C20.9375 8.5 21.7356 8.12143 22.248 7.54492C22.7605 6.96841 23 6.22917 23 5.5C23 4.77083 22.7605 4.03159 22.248 3.45508C21.7356 2.87857 20.9375 2.5 20 2.5ZM20 4C20.5625 4 20.8894 4.18393 21.127 4.45117C21.3645 4.71841 21.5 5.10417 21.5 5.5C21.5 5.89583 21.3645 6.28159 21.127 6.54883C20.8894 6.81607 20.5625 7 20 7C19.4375 7 19.1106 6.81607 18.873 6.54883C18.6355 6.28159 18.5 5.89583 18.5 5.5C18.5 5.10417 18.6355 4.71841 18.873 4.45117C19.1106 4.18393 19.4375 4 20 4ZM14.5 12.5C15.0625 12.5 15.3894 12.6839 15.627 12.9512C15.8645 13.2184 16 13.6042 16 14C16 14.3958 15.8645 14.7816 15.627 15.0488C15.3894 15.3161 15.0625 15.5 14.5 15.5C13.9375 15.5 13.6106 15.3161 13.373 15.0488C13.1355 14.7816 13 14.3958 13 14C13 13.6042 13.1355 13.2184 13.373 12.9512C13.6106 12.6839 13.9375 12.5 14.5 12.5ZM5 17C5.5625 17 5.88941 17.1839 6.12695 17.4512C6.3645 17.7184 6.5 18.1042 6.5 18.5C6.5 18.8958 6.3645 19.2816 6.12695 19.5488C5.88941 19.8161 5.5625 20 5 20C4.4375 20 4.11059 19.8161 3.87305 19.5488C3.6355 19.2816 3.5 18.8958 3.5 18.5C3.5 18.1042 3.6355 17.7184 3.87305 17.4512C4.11059 17.1839 4.4375 17 5 17Z'
          fill='#5961CC'
        ></path>
      </svg>
    )
  },
  {
    column: 'Prices',
    isSortable: true,
    sortFunction: (a, b) => a.monthPrice - b.monthPrice,
    icon: (
      <svg xmlns='http://www.w3.org/2000/svg' width='25' height='24' viewBox='0 0 25 24' fill='none'>
        <path
          d='M15.9039 4C15.2964 4 14.7122 4.23161 14.2825 4.64466L14.1205 4.80016H11.7365C11.129 4.80016 10.5448 5.03177 10.1152 5.44482L3.1674 12.1157C2.27753 12.97 2.27753 14.3729 3.1674 15.2272L7.47068 19.3593C8.36055 20.2136 9.82272 20.2136 10.7126 19.3593L11.5916 18.5146L11.638 18.5591C12.5279 19.4134 13.9901 19.4134 14.8799 18.5591L21.8285 11.8883C22.2581 11.4758 22.5 10.9159 22.5 10.3325V5.80035C22.4994 4.81336 21.6522 4 20.6239 4H15.9039ZM15.9039 5.20024H20.6239C20.9766 5.20024 21.2496 5.46149 21.2498 5.80035V10.3325C21.2498 10.5973 21.1392 10.852 20.9438 11.0397L13.996 17.7097C13.584 18.1053 12.9348 18.1053 12.5228 17.7097L8.21869 13.5784C7.80667 13.1829 7.80667 12.5597 8.21869 12.1641L15.1673 5.49326C15.3627 5.30539 15.6271 5.20024 15.9039 5.20024ZM11.7365 6.00039H12.8703L7.33475 11.3155C6.44488 12.1698 6.44488 13.5728 7.33475 14.4271L10.7077 17.666L9.82865 18.5099C9.41664 18.9054 8.76744 18.9054 8.35543 18.5099L4.05134 14.3786C3.63933 13.9831 3.63933 13.3598 4.05134 12.9643L10.9999 6.29342C11.1953 6.10555 11.4597 6.00039 11.7365 6.00039ZM18.7486 6.40047C18.417 6.40047 18.099 6.52693 17.8645 6.75201C17.6301 6.9771 17.4984 7.28239 17.4984 7.60071C17.4984 7.91903 17.6301 8.22432 17.8645 8.4494C18.099 8.67449 18.417 8.80094 18.7486 8.80094C19.0801 8.80094 19.3981 8.67449 19.6326 8.4494C19.8671 8.22432 19.9988 7.91903 19.9988 7.60071C19.9988 7.28239 19.8671 6.9771 19.6326 6.75201C19.3981 6.52693 19.0801 6.40047 18.7486 6.40047Z'
          fill='#5961CC'
        ></path>
      </svg>
    )
  }
]

export const BuCloudPricingTable = ({ vpsData }: { vpsData: VpsProduct[] }) => {
  const buCloudProducts: Product[] = useMemo(() => {
    return vpsData.map((product) => {
      const { name, m: price, description } = product

      const vpsSpecs = parseSpecs<{
        CPU: string
        Ram: string
        Storage: string
        Bandwidth: string
      }>(description)

      return {
        plan: name,
        processor: vpsSpecs.CPU,
        ram: vpsSpecs.Ram,
        storage: vpsSpecs.Storage,
        bandwidth: vpsSpecs.Bandwidth,
        monthPrice: price,
        yearPrice: price * 12
      }
    })
  }, [vpsData])

  const [periodPrice, setPeriodPrice] = useState('monthly')
  const [products, setProducts] = useState<Product[]>(buCloudProducts)
  const [sortColumn, setSortColumn] = useState<{
    column: string | null
    direction: 'asc' | 'desc'
  }>({
    column: null,
    direction: 'asc'
  })

  useEffect(() => {
    if (!sortColumn.column) {
      setProducts(buCloudProducts)
    } else {
      const sortedProducts = [...products].sort((a, b) => {
        if (sortColumn.column) {
          const column = productHeaderList.find((c) => c.column === sortColumn.column)
          if (column) {
            return sortColumn.direction === 'asc'
              ? (column?.sortFunction?.(a, b) ?? 0)
              : (column?.sortFunction?.(b, a) ?? 0)
          }
        }
        return 0
      })
      setProducts(sortedProducts)
    }
  }, [sortColumn])

  useEffect(() => {
    setSortColumn({
      column: null,
      direction: 'asc'
    })
  }, [])
  return (
    <>
      <div className=''>
        <div className='py-0 pl-[21px] pr-[24px] max-lg:min-w-[939px]'>
          <ul className='price_header mx-auto my-0 flex w-full items-center justify-start pr-0'>
            {productHeaderList.map((header) => (
              <li key={header.column} className='w-[15%] py-0 pl-5 pr-0'>
                <a
                  className={cn('flex items-center text-sm font-normal text-[#253858] no-underline', {
                    'cursor-pointer': header.isSortable
                  })}
                  onClick={() => {
                    if (header.isSortable) {
                      if (sortColumn.column === header.column && sortColumn.direction === 'desc') {
                        setSortColumn({
                          column: null,
                          direction: 'asc'
                        })
                      } else {
                        setSortColumn({
                          column: header.column,
                          direction:
                            sortColumn.column === header.column
                              ? sortColumn.direction === 'asc'
                                ? 'desc'
                                : 'asc'
                              : 'asc'
                        })
                      }
                    }
                  }}
                >
                  {header.icon}
                  <span className='ml-[5px] select-none text-[0.875rem]'>{header.column}</span>
                  {/* Sort icon */}
                  {header.isSortable && (
                    <div
                      className={cn('sort-icon ml-[5px] opacity-0', {
                        'opacity-100': sortColumn.column === header.column,
                        'sort-asc': sortColumn.direction === 'asc' && sortColumn.column === header.column,
                        'sort-desc': sortColumn.direction === 'desc' && sortColumn.column === header.column
                      })}
                    >
                      <svg
                        className='upArrow mb-[5px]'
                        xmlns='http://www.w3.org/2000/svg'
                        width='10'
                        height='6'
                        viewBox='0 0 10 6'
                        fill='none'
                      >
                        <path
                          d='M1.87916 4.91184L5.00397 1.88316L8.12879 4.91184C8.44288 5.21627 8.95026 5.21627 9.26435 4.91184C9.57845 4.60741 9.57845 4.11564 9.26435 3.81121L5.56773 0.228311C5.41726 0.082144 5.21298 4.12024e-07 4.99995 3.93401e-07C4.78691 3.74777e-07 4.58263 0.0821439 4.43216 0.228311L0.735538 3.81121C0.421446 4.11564 0.421446 4.60741 0.735538 4.91184C1.04963 5.20846 1.56506 5.21627 1.87916 4.91184Z'
                          fill='#5961CC'
                        ></path>
                      </svg>
                      <svg
                        className='downArrow'
                        xmlns='http://www.w3.org/2000/svg'
                        width='10'
                        height='6'
                        viewBox='0 0 10 6'
                        fill='none'
                      >
                        <path
                          d='M8.12072 1.08816L4.9959 4.11684L1.87109 1.08816C1.557 0.783731 1.04962 0.783731 0.735523 1.08816C0.421431 1.39259 0.421431 1.88436 0.735523 2.18879L4.43215 5.77169C4.58262 5.91786 4.7869 6 4.99993 6C5.21296 6 5.41725 5.91786 5.56771 5.77169L9.26434 2.18879C9.57843 1.88436 9.57843 1.39259 9.26434 1.08816C8.95025 0.791537 8.43481 0.783731 8.12072 1.08816Z'
                          fill='#C1C7D0'
                        ></path>
                      </svg>
                    </div>
                  )}
                </a>
              </li>
            ))}
            {/* Period */}
            <li className='flex w-[15%] justify-end'>
              <Select value={periodPrice} onValueChange={setPeriodPrice}>
                <SelectTrigger className='max-w-[80px] rounded-[44px] border border-solid border-[#c1c7d099] px-[9px] py-[5px] text-[0.75rem] leading-[100%] text-[#253858]'>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value='monthly' className='text-[0.75rem]'>
                    Monthly
                  </SelectItem>
                  <SelectItem value='yearly' className='text-[0.75rem]'>
                    Yearly
                  </SelectItem>
                </SelectContent>
              </Select>
            </li>
          </ul>
        </div>
        {/* Prices */}
        <div className='priceWrapper mt-[25px] flex h-[516px] flex-col overflow-y-scroll px-[20px] max-lg:min-w-[939px]'>
          {products.map((product) => (
            <ul
              key={product.plan}
              className='price_data mx-auto my-0 flex w-full items-center justify-start pr-0 hover:shadow-[0_4px_40px_rgba(0,0,0,0.08)]'
            >
              <li>{product.plan}</li>
              <li>{product.ram}</li>
              <li>{product.processor} </li>
              <li>{product.storage} </li>
              <li>{product.bandwidth} </li>
              <li className='flex items-baseline'>
                {periodPrice === 'monthly' ? (
                  <>
                    <div className='mr-[4px] text-[1.5rem] font-semibold text-[#2f39bf]'>
                      {formatPrice(product.monthPrice, 'vi')}
                    </div>
                    <div className='text-[0.75rem]'>/Mon</div>
                  </>
                ) : (
                  <>
                    <div className='mr-[4px] text-[1.5rem] font-semibold text-[#2f39bf]'>
                      {' '}
                      {formatPrice(product.yearPrice, 'vi')}
                    </div>
                    <div className='text-[0.75rem]'>/Year</div>
                  </>
                )}
              </li>
              <li className='flex justify-end'>
                <Link
                  href='/'
                  className='duration-[0.5s] ease-[ease-in-out] relative block overflow-hidden rounded-[4.619px] border-[none] p-0 pr-[25px] text-right text-sm font-normal leading-[initial] tracking-[0] text-[#2f39bf] no-underline transition-all'
                >
                  <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16' fill='none'>
                    <path
                      d='M1.46236 9.04959H12.2119L7.51559 14.1728C7.14027 14.5823 7.14027 15.2542 7.51559 15.6636C7.89091 16.073 8.49719 16.073 8.87251 15.6636L15.2145 8.74513C15.5898 8.33569 15.5898 7.67429 15.2145 7.26485L8.88214 0.335873C8.70234 0.139287 8.45824 0.0288086 8.20367 0.0288086C7.94911 0.0288086 7.70501 0.139287 7.52521 0.335873C7.14989 0.745313 7.14989 1.40672 7.52521 1.81615L12.2119 6.9499H1.46236C0.933061 6.9499 0.5 7.42233 0.5 7.99974C0.5 8.57716 0.933061 9.04959 1.46236 9.04959Z'
                      fill='#2F39BF'
                    ></path>
                  </svg>
                </Link>
              </li>
            </ul>
          ))}
        </div>
      </div>
    </>
  )
}
